{"version":3,"sources":["src/scripts/Dot.js","src/scripts/Snake.js","index.js"],"names":["Dot","snake","x","y","ctx","isTarget","direction","dotSize","fillStyle","fillRect","Snake","canvas","dimension","getContext","Math","floor","width","speed","lock","random","dots","interval","clearRect","height","basePosition","baseDot","render","push","generateTargetDot","document","addEventListener","keyHandler","bind","setInterval","animate","abs","targetDot","filter","dot","length","firstPosition","lastDot","lastDotClone","newPosition","move","endGame","splice","unshift","forEach","collision","dot1","e","keyCode","clearInterval","confirm","start","querySelector"],"mappings":"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","file":"had.d5004605.js","sourceRoot":"..","sourcesContent":["/**\r\n * Dot class\r\n */\r\nclass Dot {\r\n    constructor(snake, x, y) {\r\n        this.snake = snake;\r\n        this.ctx = snake.ctx;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.isTarget = false;\r\n    }\r\n\r\n    /**\r\n     * Move dot\r\n     * @param x\r\n     * @param y\r\n     * @param direction\r\n     * @returns {*[]}\r\n     */\r\n    move(x, y, direction) {\r\n        switch (direction) {\r\n            case 1:\r\n                y = y - this.snake.dotSize;\r\n                break;\r\n            case 2:\r\n                x = x + this.snake.dotSize;\r\n                break;\r\n            case 3:\r\n                y = y + this.snake.dotSize;\r\n                break;\r\n            case 4:\r\n                x = x - this.snake.dotSize;\r\n                break;\r\n        }\r\n        this.x = x;\r\n        this.y = y;\r\n        return [this.x, this.y];\r\n    }\r\n\r\n    /**\r\n     * Render\r\n     */\r\n    render() {\r\n        this.ctx.fillStyle = this.isTarget ? 'white' : 'black';\r\n        this.ctx.fillRect(this.x, this.y, this.snake.dotSize, this.snake.dotSize);\r\n    }\r\n}\r\n\r\n\r\nexport default Dot","import Dot from \"./Dot\";\r\n\r\n/**\r\n * Snake game class\r\n */\r\nclass Snake {\r\n    constructor(canvas, dimension) {\r\n        this.dimension = dimension;\r\n        this.canvas = canvas;\r\n        this.ctx = canvas.getContext('2d');\r\n        this.dotSize = Math.floor(this.canvas.width / dimension);\r\n        this.speed = 70;\r\n        this.lock = false;\r\n    }\r\n\r\n    /**\r\n     * Start game\r\n     */\r\n    start() {\r\n        this.direction = Math.floor(Math.random() * 4) + 1; // 1,2,3,4\r\n        this.dots = [];\r\n        this.interval = null;\r\n        this.ctx.clearRect(0, 0, this.ctx.width, this.ctx.height);\r\n        const basePosition = this.dimension / 2 * this.dotSize - this.dotSize;\r\n        const baseDot = new Dot(this, basePosition, basePosition);\r\n        baseDot.render();\r\n        this.dots.push(baseDot);\r\n\r\n        this.generateTargetDot();\r\n\r\n        document.addEventListener('keydown', this.keyHandler.bind(this));\r\n        this.interval = setInterval(this.animate.bind(this), this.speed);\r\n    }\r\n\r\n    /**\r\n     * Generate target dot\r\n     */\r\n    generateTargetDot() {\r\n        //not in dots\r\n        const x = Math.abs(Math.floor(Math.random() * this.dimension) * this.dotSize - this.dotSize);\r\n        const y = Math.abs(Math.floor(Math.random() * this.dimension) * this.dotSize - this.dotSize);\r\n        const targetDot = new Dot(this, x, y);\r\n        targetDot.isTarget = true;\r\n        if (this.dots.filter(dot => dot.x === x && dot.y === y).length === 0) {\r\n            this.targetDot = targetDot;\r\n        } else {\r\n            this.generateTargetDot();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animate\r\n     */\r\n    animate() {\r\n\r\n        const firstPosition = [this.dots[0].x, this.dots[0].y];\r\n        const lastDot = this.dots[this.dots.length - 1];\r\n        const lastDotClone = new Dot(this, lastDot.x, lastDot.y);\r\n        const newPosition = lastDot.move(firstPosition[0], firstPosition[1], this.direction);\r\n\r\n        //konec hry\r\n        if (newPosition[0] < 0 || newPosition[1] < 0 || newPosition[1] >= this.canvas.height || newPosition[0] >= this.canvas.width) {\r\n            this.endGame();\r\n            return;\r\n        }\r\n\r\n        this.dots.splice(-1, 1);\r\n        this.dots.unshift(lastDot);\r\n\r\n        if (newPosition[0] === this.targetDot.x && newPosition[1] === this.targetDot.y) {\r\n            this.generateTargetDot();\r\n            this.dots.push(lastDotClone);\r\n        }\r\n\r\n        //bourani do sebe\r\n        this.dots.forEach(dot => {\r\n            let collision = 0;\r\n            this.dots.forEach(dot1 => {\r\n                if (dot.x === dot1.x && dot.y === dot1.y) {\r\n                    collision++;\r\n                }\r\n            });\r\n            if (collision > 1) {\r\n                this.endGame();\r\n            }\r\n        });\r\n\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.targetDot.render();\r\n        this.dots.forEach(dot => {\r\n            dot.render();\r\n        });\r\n        this.lock = false;\r\n    }\r\n\r\n    /**\r\n     * Change direction\r\n     * @param e\r\n     */\r\n    keyHandler(e) {\r\n        if (!this.lock) {\r\n            switch (e.keyCode) {\r\n                case 38:\r\n                    if (this.direction !== 3) {\r\n                        this.direction = 1;\r\n                    }\r\n                    break;\r\n                case 39:\r\n                    if (this.direction !== 4) {\r\n                        this.direction = 2;\r\n                    }\r\n                    break;\r\n                case 40:\r\n                    if (this.direction !== 1) {\r\n                        this.direction = 3;\r\n                    }\r\n                    break;\r\n                case 37:\r\n                    if (this.direction !== 2) {\r\n                        this.direction = 4;\r\n                    }\r\n                    break;\r\n            }\r\n            this.lock = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * END game\r\n     */\r\n    endGame() {\r\n        clearInterval(this.interval);\r\n        if (confirm('Konec hry! Vaše skóre je ' + (this.dots.length - 1) + '\\nChcete hrát znovu?')) {\r\n            this.start();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Snake","import Snake from \"./src/scripts/Snake\";\r\n\r\nconst canvas = document.querySelector('canvas');\r\nconst snake = new Snake(canvas,30);\r\n\r\nsnake.start();"]}